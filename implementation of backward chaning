Program:
# Facts: The knowledge base containing information about facts
facts = {
&#39;a&#39;: True,
&#39;b&#39;: True,
&#39;c&#39;: False
}
# Rules: List of rules where each rule is a tuple (conclusion, conditions)
rules = [
(&#39;d&#39;, [&#39;a&#39;, &#39;b&#39;]), # d can be concluded if a and b are true
(&#39;e&#39;, [&#39;b&#39;, &#39;c&#39;]), # e can be concluded if b and c are true
(&#39;f&#39;, [&#39;d&#39;, &#39;e&#39;]) # f can be concluded if d and e are true
]
# Backward Chaining Function
def backward_chaining(goal, facts, rules):
# Check if the goal is already a fact
if goal in facts:
return facts[goal]
# Check if the goal can be concluded from any rule

for rule in rules:
head, body = rule
if head == goal:
# Check if all the conditions in the body of the rule are true
if all(backward_chaining(fact, facts, rules) for fact in body):
return True

# If the goal cannot be proved
return False

# Example Usage:
goal = &#39;f&#39;

if backward_chaining(goal, facts, rules):
print(f&quot;The goal &#39;{goal}&#39; can be achieved.&quot;)
else:
print(f&quot;The goal &#39;{goal}&#39; cannot be achieved.&quot;)
